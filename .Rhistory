one_a<-lm(prostate$lpsa ~lcavol)
one_a<-lm(prostate$lpsa ~ prostate$lcavol)
one_a
summary(one_a)
attach(prostate)
one_b<-lm(lpsa ~ lcavol+lweight+svi+lbph+age+lcp+pgg45+gleason)
summary(one_a)
mod0<-lm(lpsa ~lcavol+lweight)
mod1<-lm(lpsa~ lcavol+lweight+svi)
mod2<-lm(lpsa~ lcavol+lweight+svi+lbph)
mod3<-lm(lpsa ~ lcavol+lweight+svi+lbph+age)
mod4<-lm(lpsa~ lcavol+lweight+svi+lbph+age+gleason)
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
dim(summary(mod0))
attr(summary(mod0))
mod0<-lm(lpsa ~lcavol+lweight)
RSS0<-deviance(mod0)/df.residual(mod0)
RSS0
RSS(mod0)
install.packages("qpcR")
library(qpcR)
RSS(mod0)
RSS<-deviance(mod)/df.residual(mod)
RSS0<-deviance(mod0)/df.residual(mod0)
RSS1<-deviance(mod1)/df.residual(mod1)
RSS2<-deviance(mod2)/df.residual(mod2)
RSS3<-deviance(mod3)/df.residual(mod3)
RSS4<-deviance(mod4)/df.residual(mod4)
install.packages("qpcR")
library(qpcR)
install.packages("rgl")
library(rgl)
RSS(mod0)
RSS
mod<-lm(prostate$lpsa ~ prostate$lcavol)
summary(mod0)
RSS<-deviance(mod)/df.residual(mod)
RSS
RSS0
summary(mod)
mod0<-lm(lpsa ~lcavol+lweight)
mod1<-lm(lpsa~ lcavol+lweight+svi)
mod2<-lm(lpsa~ lcavol+lweight+svi+lbph)
mod3<-lm(lpsa ~ lcavol+lweight+svi+lbph+age)
mod4<-lm(lpsa~ lcavol+lweight+svi+lbph+age+gleason)
summary(mod0)
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
RSS<-deviance(mod)/df.residual(mod)
RSS0<-deviance(mod0)/df.residual(mod0)
RSS1<-deviance(mod1)/df.residual(mod1)
RSS2<-deviance(mod2)/df.residual(mod2)
RSS3<-deviance(mod3)/df.residual(mod3)
RSS4<-deviance(mod4)/df.residual(mod4)
summary(mod0)
RSS0<-deviance(mod0)/df.residual(mod0)
RSS0
mod0<-lm(lpsa ~lcavol+lweight)
attach(prostate)
mod0<-lm(lpsa ~lcavol+lweight)
mod1<-lm(lpsa~ lcavol+lweight+svi)
mod2<-lm(lpsa~ lcavol+lweight+svi+lbph)
mod3<-lm(lpsa ~ lcavol+lweight+svi+lbph+age)
mod4<-lm(lpsa~ lcavol+lweight+svi+lbph+age+gleason)
summary(mod0)
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
attr(summary(mod0))
RSS0
# Residual standard error =.7875
# Multiple R-squared = .5394
RSS<-deviance(mod)/df.residual(mod)
RSS0<-deviance(mod0)/df.residual(mod0)
RSS1<-deviance(mod1)/df.residual(mod1)
RSS2<-deviance(mod2)/df.residual(mod2)
RSS3<-deviance(mod3)/df.residual(mod3)
RSS4<-deviance(mod4)/df.residual(mod4)
RSS0
summary(mod0)
mod<-lm(prostate$lpsa ~ prostate$lcavol)
summary(mod)
RSS<-deviance(mod)/df.residual(mod)
RSS<-sqrt(deviance(mod)/df.residual(mod))
RSS0<-sqrt(deviance(mod0)/df.residual(mod0))
RSS1<-sqrt(deviance(mod1)/df.residual(mod1))
RSS2<-sqrt(deviance(mod2)/df.residual(mod2))
RSS3<-sqrt(deviance(mod3)/df.residual(mod3))
RSS4<-sqrt(deviance(mod4)/df.residual(mod4))
RSS0
summary(mod0)
models<-c(mod, mod1, mod1, mod2, mod3, mod4)
Rss<-function(x){
sqrt(deviance(x)/df.residual(x))
}
Rss(models)
try<-apply(models, 1, Rss)
dim(models)
# Residual standard error =.7875
# Multiple R-squared = .5394
models<-c(mod, mod1, mod1, mod2, mod3, mod4)
models
Rss(mod)
Rss(mod1)
try<-apply(models, , Rss)
models<-data.frame(RSS, RSS0, RSS1, RSS2, mod3, mod4)
models<-data.frame(mod, mod0, mod1, mod2, mod3, mod4)
models<-list(mod, mod0, mod1, mod2, mod3, mod4)
models
Rss(models)
model[1]
mod[1]
mod[2]
mod[3]
mod[4]
mod[5]
mod[6]
mod[7]
mod[8]
mod[9]
deviance(mod)
attr(mod)
dim(mod)
Rss<-function(x){
sqrt(deviance(x)/x[8])
}
Rss(mod)
Rss(models)
Rss<-function(x){
sqrt(deviance(x)/df.residual(x))
}
Rss(models)
Rss(list(models)
Rss(list(models)
Rss(list(models))
models
summary(models)
summary(mod0)
Rss(mod0)
Rss(list(mod,mod0))
try<-apply(models,1 , Rss)
try<-apply(models,2 , Rss)
for (i in models){
R<-Rss(x)
return(R)
}
for (i in models){
R<-Rss()
return(R)
}
for (i in models){
R<-Rss(i)
return(R)
}
for (i in 1:models){
R<-Rss(i)
return(R)
}
for (i in 1:models){
R<-Rss([i])
return(R)
}
mod[1]
mod[,1]
mod[[1]]
mod[[,1]]
mod[[1:12]]
mod[1,10
mod[1,10]
mod[1,10]
mod[10]
mod[11]
summary(mod0)
summary(mod0)[10]
summary(mod0)[11]
summary(mod0)[12]
summary(mod0)[13]
attr(summary(mod0))
summary(mod0)
summary(mod0)[8]
summary(mod0)[7]
summary(mod0)[1,7]
dim(summary(mod0)[7])
attr(summary(mod0)[7])
summary(mod0)[[7]]
str(summary(mod0))
str(summary(aov(mod0)))
summary(mod0)[[1]][,'Sum Sq']
summary(mod0)[[1]][,'2']
summary(aov(mod0))[[1]][,2]
RSS0
summary(aov(mod0))
summary(aov(mod))
summary(mod)
summary(aov(mod))
summary(mod0)[[1]][,2]
summary(mod0)[[1]][,3]
summary(mod0)[1]][[,3]
summary(mod0)[1]][[,3]]
summary(mod0)[1][[,3]]
models<-as.data.frame(mod, mod0, mod1, mod2, mod3, mod4)
but<-c(RSS, RSS0, RSS1, RSS2, RSS3, RSS4)
plot(but)
summary(mod4)
summary(mod)
Residual Standard Error<-c(RSE, RSE0, RSE1, RSE2, RSE3, RSE4)
function(model){
summary(model)$r.squared
}
extract<-function(model){
summary(model)$r.squared
}
extract(mod)
mod[1]
mod[[1]]
extract(c(mod,mod0)
extract(c(mod,mod0))
extract(list(mod,mod0))
for (i in (c(mod,mod0))){
R2<-extract([1])
return(R2)
}
for (i in (c(mod,mod0))){
R2<-extract([i])
return(R2)
}
for (i in (c(mod,mod0))){
R2<-extract([i])
return(R2)
for (i in (c(mod,mod0))){
R2<-extract([i])
return(R2)}
for (i in 1:(c(mod,mod0))){
R2<-extract([i])
return(R2)}
find.package("rtools")
install.packages("devtools")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
evalCpp("2+2")
install.packages("Rcpp")
library(Rcpp)
evalCpp("2+2")
install.packages("doParallel")
library(doParallel)
detectCores()
cl<-makeCluster(3)
registerDoParallel(3)
getDoParWorkers()
library(foreach)
install.packages("foreach")
library(foreach)
x<-foreach(i = 1:3) %dopar% sqrt(i)
system.time*foreach(i1:10000)%dopar% sum(tahn(1:i))
system.time*foreach(i=1:10000)%dopar% sum(tahn(1:i))
?tahn
system.time*foreach(i=1:10000)%dopar% sum(tanh(1:i))
system.time(foreach(i=1:10000) %dopar% sum(tanh(1:i)))
registerDoParallel()
library(doParallel)
registerDoParallel()
getDoParWorkers()
registerDoSEQ()
getDoParWorkers()
system.time(foreach(i=1:10000) %dopar% sum(tanh(1:i)))
registerDoParallel(cores=4)
getDoParWorkers()
system.time(foreach(i=1:10000) %dopar% sum(tanh(1:i)))
registerDoParallel(cores=3)
system.time(foreach(i=1:10000) %dopar% sum(tanh(1:i)))
getDoParWorkers()
registerDoSEQ()
getDoParWorkers()
getDoParWorkers()
system.time(foreach(i=1:10000) %dopar% sum(tanh(1:i)))
#SPlit core + test
registerDoSEQ(cores=3)
getDoParWorkers()
#SPlit core + test
registerDoSEQ(cores=3)
#SPlit core + test
registerDoparallel(cores=3)
#SPlit core + test
registerDoParallel(cores=3)
getDoParWorkers()
system.time(foreach(i=1:10000) %dopar% sum(tanh(1:i)))
#SPlit core + test
registerDoParallel(cores=2)
system.time(foreach(i=1:10000) %dopar% sum(tanh(1:i)))
system.time(foreach(i=1:10000) %do% sum(tanh(1:i)))
registerDoParallel()
registerDoParallel()
getDoParWorkers()
#TEST SPEED
registerDoSEQ()
system.time(foreach(i=1:10000) %do% sum(tanh(1:i)))
#SPlit core + test
registerDoSEQ()
getDoParWorkers()
system.time(foreach(i=1:10000) %dopar% sum(tanh(1:i)))
registerDoParallel(cores=2)
getDoParWorkers()
system.time(foreach(i=1:10000) %do% sum(tanh(1:i)))
#SPlit core + test
registerDoSEQ()
getDoParWorkers()
system.time(foreach(i=1:10000) %do% sum(tanh(1:i)))
registerDoParallel(cores=2)
getDoParWorkers()
system.time(foreach(i=1:10000) %do% sum(tanh(1:i)))
#SPlit core + test
registerDoSEQ()
getDoParWorkers()
system.time(foreach(i=1:10000) %do% sum(tanh(1:i)))
registerDoParallel(cores=3)
getDoParWorkers()
system.time(foreach(i=1:10000) %dopar% sum(tanh(1:i)))
r<-square<-function(x){b^2+(1:20)}
r
b<-sample(1:100)
r<-square<-function(x){b^2+(1:20)}
r
r(b)
r<-square<-function(x){b^2+(1:10000000)}
r(b)
r<-square<-function(x){b^2+(1:10000)}
r(b)
r<-square<-function(x){b^2+(1:100)}
r(b)
c<-c(1:10000)
b<-sample(1:10000)
r<-square<-function(x){b^2+(1:100)}
r(c)
apply(c, 1, square)
apply(c,  square)
#SPlit core + test
registerDoSEQ()
getDoParWorkers()
system.time(foreach(i=1:10000) %do% sum(tanh(1:i)))
registerDoParallel(cores=3)
getDoParWorkers()
system.time(foreach(i=1:10000) %dopar% sum(tanh(1:i)))
f_stat3<-((r_F3-r_03)/(1-r_F3))*(17/2)
mod_prost<- lm(lpsa~ lcavol+lweight+svi+lbph+age+lcp+gleason+pgg45)
mod_prost
restr_mod<-lm(lpsa~lcp+pgg45+gleason)
r_F<-summary(mod_prost)$r.squared
r_0<-summary(restr_mod)$r.squared
f_stat<-((r_F-r_0)/(1-r_F)) * 88/3
cv<-pf(.95, df1=3, df2=88)
#^ I don't really know if this is the critical value but we'll pretend
f_stat>cv
#install.packages("faraway")
library(faraway)
attach(prostate)
mod_prost<- lm(lpsa~ lcavol+lweight+svi+lbph+age+lcp+gleason+pgg45)
mod_prost
restr_mod<-lm(lpsa~lcp+pgg45+gleason)
r_F<-summary(mod_prost)$r.squared
r_0<-summary(restr_mod)$r.squared
f_stat<-((r_F-r_0)/(1-r_F)) * 88/3
cv<-pf(.95, df1=3, df2=88)
#^ I don't really know if this is the critical value but we'll pretend
f_stat>cv
Y<-c(39.32, 198.64, 175.47, 40.36, 17.66, 78.49, 48.04, 157.67,
11.29, 39.51, 23.23, 100.66, 31.52, 128.60, 169.41, 37.85, 62.44, 14.48, 37.85, 17.64)
K<-c(3.58, 18.23, 12.10, 15.13, 8.32, 19.90, 5.90, 17.60, 1.68,
12.57, 12.25, 17.19, 6.64, 13.57, 15.88, 4.78, 18.15, 18.56, 4.03, 18.85)
L<-c(39.07, 54.62, 34.08, 49.35, 48.96, 62.30, 44.00, 45.49, 68.26,
39.85, 41.73, 36.21, 59.94, 45.07, 41.55, 30.65, 31.54, 38.80, 68.64, 30.16)
lnY<-log(Y)
lnK<-log(K)
lnL<-log(L)
cobb<-(lm(lnY~lnK+lnL))
cobb_restr<-lm(lnY~lnK+(1-lnK))
r_F3<-summary(cobb)$r.squared
r_03<-summary(cobb_restr)$r.squared
f_stat3<-((r_F3-r_03)/(1-r_F3))*(17/2)
f_stat3
modelx1<-lm(Y~X1, strange)
modelx2<-lm(Y~X2, strange)
modelx3<-lm(Y~X3, strange)
modelx4<-lm(Y~X4, strange)
modelx5<-lm(Y~X5, strange)
modelx6<-lm(Y~X6, strange)
modelx7<-lm(Y~X7, strange)
modelx8<-lm(Y~X8, strange)
modelx9<-lm(Y~X9, strange)
modelx10<-lm(Y~X10, strange)
sum<-summary(r)
r<-(lm(Y~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10, strange))
Y<-c(39.32, 198.64, 175.47, 40.36, 17.66, 78.49, 48.04, 157.67,
11.29, 39.51, 23.23, 100.66, 31.52, 128.60, 169.41, 37.85, 62.44, 14.48, 37.85, 17.64)
K<-c(3.58, 18.23, 12.10, 15.13, 8.32, 19.90, 5.90, 17.60, 1.68,
12.57, 12.25, 17.19, 6.64, 13.57, 15.88, 4.78, 18.15, 18.56, 4.03, 18.85)
L<-c(39.07, 54.62, 34.08, 49.35, 48.96, 62.30, 44.00, 45.49, 68.26,
39.85, 41.73, 36.21, 59.94, 45.07, 41.55, 30.65, 31.54, 38.80, 68.64, 30.16)
lnY<-log(Y)
lnK<-log(K)
lnL<-log(L)
#install.packages("faraway")
library(faraway)
attach(prostate)
cobb<-(lm(lnY~lnK+lnL))
cobb_restr<-lm(lnY~lnK+(1-lnK))
r_F3<-summary(cobb)$r.squared
r_03<-summary(cobb_restr)$r.squared
f_stat3<-((r_F3-r_03)/(1-r_F3))*(17/2)
f_stat3
#dfn=2
#dfd=17
cv3<-pf(.95, df1=2, df2=17)
f_stat3>cv3
f_stat3
strange<-data.hwk.txt <- read.delim("C:/Users/Dominique/OneDrive/Documents/Spring 2018/Quantitative Political Methodology/Week 7/data-hwk.txt.txt")
View(strange)
val<-sample(nrow(strange), 50)
train<-strange[-val, ]
validation<-strange[sample(nrow(strange), 50), ]
test<-lm(Y~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10, train)
pred<-predict(test, newdata=validation[-1,], interval="prediction")
pred<-as.data.frame(pred)
validation$Y-pred$fit
strange<-data.hwk.txt <- read.delim("C:/Users/Dominique/OneDrive/Documents/Spring 2018/Quantitative Political Methodology/Week 7/data-hwk.txt.txt")
strange<-data.hwk.txt <- read.delim("C:/Users/dl0ck/OneDrive/Documents/Spring 2018/Quantitative Political Methodology/Week 7/data-hwk.txt.txt")
val<-sample(nrow(strange), 50)
train<-strange[-val, ]
validation<-strange[sample(nrow(strange), 50), ]
test<-lm(Y~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10, train)
pred<-predict(test, newdata=validation[-1,], interval="prediction")
pred<-as.data.frame(pred)
validation$Y-pred$fit
modelx1<-lm(Y~X1, strange)
modelx2<-lm(Y~X2, strange)
modelx3<-lm(Y~X3, strange)
modelx4<-lm(Y~X4, strange)
modelx5<-lm(Y~X5, strange)
modelx6<-lm(Y~X6, strange)
modelx7<-lm(Y~X7, strange)
modelx8<-lm(Y~X8, strange)
modelx9<-lm(Y~X9, strange)
modelx10<-lm(Y~X10, strange)
r<-(lm(Y~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10, strange))
r_x1<-summary(modelx1)$r.squared
f_stat1<-((r_F-r_x1)/(1-r_F))*(139)
f_stat1
cv1<-pf(.95, df1=1, df2=139)
f_stat1>cv1
r_x2<-summary(modelx2)$r.squared
f_stat2<-((r_F-r_x2)/(1-r_F))*(139)
f_stat2>cv1
r_x2
cv1<-pf(.95, df1=1, df2=139)
cv1
f_stat2>cv1
f_stat2
r_x3<-summary(modelx3)$r.squared
f_stat3<-((r_F-r_x3)/(1-r_F))*(139)
f_stat3>cv1
r_x5<-summary(modelx5)$r.squared
f_stat5<-((r_F-r_x5)/(1-r_F))*(139)
f_stat5>cv1
release(current.code, check=FALSE)
## Load libraries a
setwd("C:/Users/dl0ck/OneDrive/Documents/Spring 2018/Applied Statistical Programming/git/Week 8/PS5/") #This will need to be changed to match your directory
library(devtools)
library(roxygen2)
## At this point put the *.R files into the correcto directories and edit the DESCRIPTION file
current.code<-as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
install(pkg=current.code, local=TRUE)
build(current.code, path=getwd())
printTrapezoid
getMethod(printTrapezoid, "Trapezoid")
release(current.code, check=FALSE)
## Load libraries a
setwd("C:/Users/dl0ck/OneDrive/Documents/Spring 2018/Applied Statistical Programming/git/Week 8/PS5/") #This will need to be changed to match your directory
library(devtools)
library(roxygen2)
## This is run once when the package strcuture is first created
## At this point put the *.R files into the correcto directories and edit the DESCRIPTION file
current.code<-as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
install(pkg=current.code, local=TRUE)
build(current.code, path=getwd())
printTrapezoid
getMethod(printTrapezoid, "Trapezoid")
printSimpson
getmethod(printTrapezoid, "Simpson")
release(current.code, check=FALSE)
integrateIt
