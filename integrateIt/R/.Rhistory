dim(Ornstein)
\documentclass[12pt, letterpaper, notitlepage, onecolumn, twoside]{article}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsfonts}
\usepackage{enumerate}
\usepackage{mathrsfs}
\usepackage{turnstile}
\usepackage{epsf,graphicx,psfrag}
\usepackage{lscape}
\usepackage{latexsym}
\usepackage{natbib}
\usepackage{setspace}
\usepackage[top=1in, bottom=1in, right=1in, left=1in]{geometry}
\usepackage{dcolumn}
\newcolumntype{.}{D{.}{.}{-1}}      % Allows alignment of decimal places
\newcolumntype{d}[1]{D{.}{.}{#1}}
\usepackage{url}
\usepackage{fancyhdr}
\pagestyle{fancy}
\lhead{}
\chead{}
\rhead{}
\cfoot{PS 581 2 - Lockett \thepage}
\renewcommand{\headrulewidth}{0pt}
\title{PS 581 Problem Set 2: Dominique Lockett}
\date{}
\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle
\vspace{-2cm}
\section{Loop Practice}
\begin{enumerate}[(a)]
\item
After loading the dataset, I look at some of the structure and then assign a linear model named mode1, commanding it to compare the level of entanglement to to the value of the company.
summary(Ornstein$sector)
<<>>==
library(car)
data(Ornstein)
dim(Ornstein)
model<-lm(interlocks~ log(assets), data=Ornstein)
summary(model)
lm(formula=interlocks~log(assets),data=Ornstein)
plot(Ornstein$interlocks, Ornstein$assets)
@
[1a] This data suggests that larger firms have more entangled as illustrated by the positive relationship which predicts that for every one unit increase in assets there is a 7.333 increase in interlockedness.
\item
<<>>==
coefs<-coef(lm(interlocks~log(assets), data=Ornstein))
coefs
for(i in 1:length(unique(Ornstein$nation))){
coefs.nation<-coef(lm(interlocks~log(assets),
data=Ornstein[Ornstein$nation==sort(unique(Ornstein$nation))[i],]))
coefs<-rbind(coefs,coefs.nation)
}
row.names(coefs)<-c("all observations", as.character(sort(unique(Ornstein$nation))))
coefs
@
[1b]
The relationship does hold for nations with the US having the least strong and Canada having the strongest causal relationship between interlockedness and assets.
\end{enumerate}
\section{The Central Limit Theorem}
\begin{enumerate}[(a)]
\item
<<>>==
y<-sample(rnorm(100, 0, 1))
mean(y)
sd(y)
@
\item
<<>>=
av <- as.data.frame(matrix(NA, nrow=50, ncol=2))
for(i in 1:50){
y <- rnorm(100)
av[i,1] <- mean(y)
av[i,2] <- sd(y)
}
sd(av$V1)
@
\item
<<>>==
avfun <- function(n){
av<-as.data.frame(matrix(NA, nrow=n, ncol=1))
for(i in 1:n){
y <- rnorm(100)
av[i,1] <- mean(y)}
print(av$V1)
}
avfun(50)
avfun(50)
fin<-avfun(50)
density(fin)
@
<<fig=T, echo=T, width=4, height=5>>=
p1 <- density(fin)
plot(p1, main="D",xlab="",ylab="")
@
<<>>==
av2 <- function(n){
av2<-as.data.frame(matrix(NA, nrow=n, ncol=1))
for(i in 1:n){
r <- chisq(100)
av[i,1] <- mean(r)}
print(av$V1)
}
avfun(50)
avfun(50)
fin.2<-avfun(50)
density(fin)
@
<<fig=T, echo=T, width=4, height=5>>=
p1 <- density(fin.2)
plot(p1, main="Chi",xlab="",ylab="")
@
\end{enumerate}
%\section{Bias and Efficiency}
\section{OLS Regression Formula}
Show that the formula for the LS estimator of the slope
\[
\hat{\beta} = \frac{n\sum_{i=1}^{n}X_{i}Y_{i} - \sum_{i=1}^{n}X_{i}\sum_{i=1}^{n}Y_{i}}{n\sum_{i=1}^{n}X_{i}^{2} - \left(\sum_{i=1}^{n}X_{i}\right)^{2}}
\]
can be rewritten as:
\begin{equation*}
\hat{\beta} = \frac{\sum_{i=1}^{n}(X_{i}-\bar{X})(Y_{i}-\bar{Y})}{\sum_{i=1}^{n}(X_{i}-\bar{X})^{2}}
\end{equation*}
(20 points)\\
\section{Estimating Regression Coefficients ``by hand''}
(20 points)
\begin{table}[h]
\caption{Data for exercise 4}\label{table}
\begin{center}
\begin{tabular}{rrr}
\hline
\emph{i} & $x_{1i}$ &  $y_{i}$\\ \hline
1   &    0.55& --21.84\\
2   &   35.18&  79.13\\
3   &   31.75&  77.11\\
4   &   29.20&  92.36\\
5   &  --17.21&--94.33\\
6   &    7.06&  18.48\\
7   &   15.26&  52.34\\
8   &   20.47& 41.44\\
9   &   22.17&  79.28\\
10  &   11.89& 10.11\\ \hline
\end{tabular}
\end{center}
\end{table}
\end{document}
summary(Ornstein$sector)
mod.agr <- lm(interlocks ~ log(assets), data=Ornstein[Ornstein$sector=="AGR",])
summary(mod.agr)
length (unique (Ornstein$sector))
length (unique (Ornstein$sector))
y<-sample(rnorm(100, 0, 1))
y
y<-(rnorm(100, 0, 1))
y
y<-(rnorm(100, 0, 1))
y
y<-(rnorm(100,))
y
av[i,1]
av
table1<- data.frame(x=c(.55, 35.18, 31.75,29.29, -17.21, 7.06, 15.26, 20.47, 22.17, 11.89),y=c(-21.84, 79.13, 77.11, 92.36, -94.33, 18.48, 52.34, 41.44, 79.28, 10.11) )
table1
sum(x)
sum(table1$x)
mean(a)
a<-sum(table1$x)
mean(a)
mean(table1)
mean(table1$x)
mean(table1$y)
[(.55-15.641)*(-21.84-33.408)] + [(35.18-15.641)*(79.13-33.408)] + [(31.75-15.641)*(77.11-33.408)] + [(29.20-15.641)*(92.36-33.408)] + [(-17.21-15.641)*(-94.33 -33.408)] + [(7.06-15.641)*(18.48-33.408)] + [(15.26-15.641)*(52.34-33.408)]+ [(20.47-15.641)*(41.44-33.408)] + [(22.17-15.641)*(79.28-33.408)] + [(11.89-15.641)*(10.11-33.408)]
[(.55-15.641)*(-21.84-33.408) + (35.18-15.641)*(79.13-33.408) + (31.75-15.641)*(77.11-33.408) + (29.20-15.641)*(92.36-33.408) + (-17.21-15.641)*(-94.33 -33.408) + (7.06-15.641)*(18.48-33.408) + (15.26-15.641)*(52.34-33.408)+ (20.47-15.641)*(41.44-33.408) + (22.17-15.641)*(79.28-33.408) + (11.89-15.641)*(10.11-33.408)]
(.55-15.641)*(-21.84-33.408) + (35.18-15.641)*(79.13-33.408) + (31.75-15.641)*(77.11-33.408) + (29.20-15.641)*(92.36-33.408) + (-17.21-15.641)*(-94.33 -33.408) + (7.06-15.641)*(18.48-33.408) + (15.26-15.641)*(52.34-33.408)+ (20.47-15.641)*(41.44-33.408) + (22.17-15.641)*(79.28-33.408) + (11.89-15.641)*(10.11-33.408)
num<-(.55-15.641)*(-21.84-33.408) + (35.18-15.641)*(79.13-33.408) + (31.75-15.641)*(77.11-33.408) + (29.20-15.641)*(92.36-33.408) + (-17.21-15.641)*(-94.33 -33.408) + (7.06-15.641)*(18.48-33.408) + (15.26-15.641)*(52.34-33.408)+ (20.47-15.641)*(41.44-33.408) + (22.17-15.641)*(79.28-33.408) + (11.89-15.641)*(10.11-33.408)
num<-(.55-15.641)*(-21.84-33.408) + (35.18-15.641)*(79.13-33.408) + (31.75-15.641)*(77.11-33.408) + (29.20-15.641)*(92.36-33.408) + (-17.21-15.641)*(-94.33 -33.408) + (7.06-15.641)*(18.48-33.408) + (15.26-15.641)*(52.34-33.408)+ (20.47-15.641)*(41.44-33.408) + (22.17-15.641)*(79.28-33.408) + (11.89-15.641)*(10.11-33.408)
num
den<-(.55-33.408)^{2} + (35.18 -33.408)^{2} + (31.75-33.408)^{2} + (29.20 -33.408)^{2} + (–17.21-33.408)^{2} + (7.06-33.408)^{2} + (15.26-33.408)^{2} + (20.47-33.408)^{2} + (22.17}-33.408)^{2} + (11.89-33.408)^{2}
den<-(.55-33.408)^{2} + (35.18 -33.408)^{2} + (31.75-33.408)^{2} + (29.20 -33.408)^{2} + (–17.21-33.408)^{2} + (7.06-33.408)^{2} + (15.26-33.408)^{2} + (20.47-33.408)^{2} + (22.17}-33.408)^{2} + (11.89-33.408)^{2}
den
((.55-33.408)^{2})
den<-((.55-33.408)^{2}) + ((35.18 -33.408)^{2}) + ((31.75-33.408)^{2}) + ((29.20 -33.408)^{2}) + ((–17.21-33.408)^{2}) + ((7.06-33.408)^{2}) + ((15.26-33.408)^{2}) + ((20.47-33.408)^{2}) + ((22.17}-33.408)^{2}) + ((11.89-33.408)^{2})
den
den<-((.55-33.408)^{2}) + ((35.18 -33.408)^{2}) + ((31.75-33.408)^{2}) + ((29.20 -33.408)^{2}) + ((–17.21-33.408)^{2}) + ((7.06-33.408)^{2}) + ((15.26-33.408)^{2}) + ((20.47-33.408)^{2}) + ((22.17}-33.408)^{2}) + ((11.89-33.408)^{2})
den<-((.55-33.408)^{2}) + ((35.18 -33.408)^{2}) + ((31.75-33.408)^{2}) + ((29.20 -33.408)^{2}) + ((–17.21-33.408)^{2}) + ((7.06-33.408)^{2}) + ((15.26-33.408)^{2}) + ((20.47-33.408)^{2}) + ((22.17}-33.408)^{2}) + ((11.89-33.408)^{2})
den<-((.55-33.408)^{2}) + ((35.18 -33.408)^{2}) + ((31.75-33.408)^{2}) + ((29.20 -33.408)^{2}) + ((-17.21-33.408)^{2}) + ((7.06-33.408)^{2}) + ((15.26-33.408)^{2}) + ((20.47-33.408)^{2}) + ((22.17}-33.408)^{2}) + ((11.89-33.408)^{2})
den<-((.55-33.408)^{2}) + ((35.18 -33.408)^{2}) + ((31.75-33.408)^{2}) + ((29.20 -33.408)^{2}) + ((-17.21-33.408)^{2}) + ((7.06-33.408)^{2}) + ((15.26-33.408)^{2}) + ((20.47-33.408)^{2}) + ((22.17-33.408)^{2}) + ((11.89-33.408)^{2})
den
num/dem
num/den
num/den=
33.408 - (1.464148)*(15.641)
33.408 - (1.464148*15.641)
install.packages("chicago")
install.packages("faraway")
vec<-rep(1,n)
source('~/.active-rstudio-document', echo=TRUE)
vec<-rep(1,30)
vec
chicago
library(chicago)
vec<- rep(1,n)
my.lm<-function(y,x){
n=length(y)
mm<-as.matrix(cbind(vec, X))
b<-solve(crossprod(mm)0%*%t(mm)%*%Y)
return(b)
}
library(faraway)
library(chicago)
chicago
X<-chicago[chicago!(chicago$income)]
chicago[,c('income')]
X<-chicago[,-c('income')]
chicago
X<-chicago[,-7]
X
Y=chicago$income
X<-chicago[,-7]
vec<- rep(1,n)
my.lm<-function(y,x){
n=length(y)
mm<-as.matrix(cbind(vec, X))
b<-solve(crossprod(mm)%*%t(mm)%*%Y)
return(b)
}
my.lm()
my.lm(Y,X)
Y=chicago$income
X<-chicago[,-7]
vec<- rep(1,n)
my.lm<-function(y,x){
n=length(y)
mm<-as.matrix(cbind(vec, x))
b<-solve(crossprod(mm)%*%t(mm)%*%Y)
return(b)
}
my.lm(Y,X)
Y=chicago$income
X<-chicago[,-7]
vec<- rep(1,n)
my.lm<-function(y,x){
n=length(y)
mm<-as.matrix(cbind(vec, x))
b<-solve(crossprod(mm)%*%t(mm)%*%y)
return(b)
}
my.lm(Y,X)
my.lm<-function(y,x){
n=length(y)
vec<- rep(1,n)
mm<-as.matrix(cbind(vec, x))
b<-solve(crossprod(mm)%*%t(mm)%*%y)
return(b)
}
my.lm(Y,X)
X<-chicago[,-7]
my.lm<-function(y,x){
n=length(y)
vec<- rep(1,n)
mm<-as.matrix(cbind(vec, x))
b<-solve(crossprod(mm))%*%t(mm)%*%y
return(b)
}
my.lm(Y,X)
summary(lm)
summary(lm(income~.,chicago))
library(dplyr)
stopwords = c("a" ,"an", "the", ":","-","  ")
A<-Expends2002%>%
group_by(State)%>%
summarise(reci_names = toString(unique(CRPRecipname)),
commi_names = toString(unique(CRPFilerid)),
reci_names = toString(unique(City)),
Mean=mean(Amount),
num=length(Amount),
total=sum(Amount),
Median=median(Amount),
freq_words=toString(names(sort(table(removeWords(unlist(strsplit(dat$Descrip," ")),stopwords)),decreasing=T)[1:5]))
)
#11.4
col<-subset(Expends2002,Expends2002$State=="CO")
newdata <- col[order(-(col$Amount)),]
top_three<-as.character(newdata$CRPRecipname[1:3])
top_three #answer
dataList[["DE"]][["freq_words"]] #answer
(Expends2002$TX)["Median"]
#11.3
data<-matrix(NA,nrow=length(Expends2002),ncol=2)
colnames(data)<- c("total","state")
for (i in 1:length(Expends2002)){
data[i,1]<-as.numeric(Expends2002[[i]]$total)
data[i,2]<-(names(Expends2002[i]))
}
data<-as.data.frame(data)
data
col<-subset(Expends2002,Expends2002$State=="CO")
newdata <- col[order(-(col$Amount)),]
top_three<-as.character(newdata$CRPRecipname[1:3])
top_three
dataList<-list(AL=subset(A,A$State=="AL",select = -State),
dataList<-list(AL=subset(A,A$State=="AL",select = -State),
AK=subset(A,A$State=="AK",select = -State),
AZ=subset(A,A$State=="AZ",select = -State),
AR=subset(A,A$State=="AR",select = -State),
CA=subset(A,A$State=="CA",select = -State),
CO=subset(A,A$State=="CO",select = -State),
CT=subset(A,A$State=="CT",select = -State),
DE=subset(A,A$State=="DE",select = -State),
FL=subset(A,A$State=="FL",select = -State),
GA=subset(A,A$State=="GA",select = -State),
HI=subset(A,A$State=="HI",select = -State),
ID=subset(A,A$State=="ID",select = -State),
IL=subset(A,A$State=="IL",select = -State),
IN=subset(A,A$State=="IN",select = -State),
IA=subset(A,A$State=="IA",select = -State),
KS=subset(A,A$State=="KS",select = -State),
KY=subset(A,A$State=="KY",select = -State),
LA=subset(A,A$State=="LA",select = -State),
ME=subset(A,A$State=="ME",select = -State),
MD=subset(A,A$State=="MD",select = -State),
MA=subset(A,A$State=="MA",select = -State),
MI=subset(A,A$State=="MI",select = -State),
MN=subset(A,A$State=="MN",select = -State),
MS=subset(A,A$State=="MS",select = -State),
MO=subset(A,A$State=="MO",select = -State),
MT=subset(A,A$State=="MT",select = -State),
NE=subset(A,A$State=="NE",select = -State),
NV=subset(A,A$State=="NV",select = -State),
NH=subset(A,A$State=="NH",select = -State),
NJ=subset(A,A$State=="NJ",select = -State),
NM=subset(A,A$State=="NM",select = -State),
NY=subset(A,A$State=="NY",select = -State),
NC=subset(A,A$State=="NC",select = -State),
ND=subset(A,A$State=="ND",select = -State),
OH=subset(A,A$State=="OH",select = -State),
OK=subset(A,A$State=="OK",select = -State),
OR=subset(A,A$State=="OR",select = -State),
PA=subset(A,A$State=="PA",select = -State),
RI=subset(A,A$State=="RI",select = -State),
SC=subset(A,A$State=="SC",select = -State),
SD=subset(A,A$State=="SD",select = -State),
TN=subset(A,A$State=="TN",select = -State),
TX=subset(A,A$State=="TX",select = -State),
UT=subset(A,A$State=="UT",select = -State),
VT=subset(A,A$State=="VT",select = -State),
VA=subset(A,A$State=="VA",select = -State),
WA=subset(A,A$State=="WA",select = -State),
WV=subset(A,A$State=="WV",select = -State),
WI=subset(A,A$State=="WI",select = -State),
WY=subset(A,A$State=="WY",select = -State),
DC=subset(A,A$State=="DC",select = -State))
dataList$AL<-as.list(dataList$AL)
dataList$AL<-as.list(dataList$AL)
dataList$AK<-as.list(dataList$AK)
dataList$AZ<-as.list(dataList$AZ)
dataList$AR<-as.list(dataList$AR)
dataList$CA<-as.list(dataList$CA)
dataList$CO<-as.list(dataList$CO)
dataList$CT<-as.list(dataList$CT)
dataList$DE<-as.list(dataList$DE)
dataList$FL<-as.list(dataList$FL)
dataList$GA<-as.list(dataList$GA)
dataList$HI<-as.list(dataList$HI)
dataList$ID<-as.list(dataList$ID)
dataList$IL<-as.list(dataList$IL)
dataList$IN<-as.list(dataList$IN)
dataList$IA<-as.list(dataList$IA)
dataList$KS<-as.list(dataList$KS)
dataList$KY<-as.list(dataList$KY)
dataList$LA<-as.list(dataList$LA)
dataList$ME<-as.list(dataList$ME)
dataList$MD<-as.list(dataList$MD)
dataList$MA<-as.list(dataList$MA)
dataList$MI<-as.list(dataList$MI)
dataList$MN<-as.list(dataList$MN)
dataList$MS<-as.list(dataList$MS)
dataList$MO<-as.list(dataList$MO)
dataList$MT<-as.list(dataList$MT)
dataList$NE<-as.list(dataList$NE)
dataList$NV<-as.list(dataList$NV)
dataList$NH<-as.list(dataList$NH)
dataList$NJ<-as.list(dataList$NJ)
dataList$NM<-as.list(dataList$NM)
dataList$NY<-as.list(dataList$NY)
dataList$NC<-as.list(dataList$NC)
dataList$ND<-as.list(dataList$ND)
dataList$OH<-as.list(dataList$OH)
dataList$OK<-as.list(dataList$OK)
dataList$OR<-as.list(dataList$OR)
dataList$PA<-as.list(dataList$PA)
dataList$RI<-as.list(dataList$RI)
dataList$SC<-as.list(dataList$SC)
dataList$SD<-as.list(dataList$SD)
dataList$TN<-as.list(dataList$TN)
dataList$TX<-as.list(dataList$TX)
dataList$UT<-as.list(dataList$UT)
dataList$VT<-as.list(dataList$VT)
dataList$VA<-as.list(dataList$VA)
dataList$WA<-as.list(dataList$WA)
dataList$WV<-as.list(dataList$WV)
dataList$WI<-as.list(dataList$WI)
dataList$WY<-as.list(dataList$WY)
dataList$DC<-as.list(dataList$DC)
#11.1
(dataList$MO)["total"]
ibrary(dplyr)
stopwords = c("a" ,"an", "the", ":","-","  ")
A<-Expends2002%>%
by(State)%>%
summarise(reci_names = toString(unique(CRPRecipname)),
commi_names = toString(unique(CRPFilerid)),
reci_names = toString(unique(City)),
Mean=mean(Amount),
num=length(Amount),
total=sum(Amount),
Median=median(Amount),
freq_words=toString(names(sort(table(removeWords(unlist(strsplit(dat$Descrip," ")),stopwords)),decreasing=T)[1:5]))
)
library(dplyr)
stopwords = c("a" ,"an", "the", ":","-","  ")
A<-Expends2002
by(State)
summarise(reci_names = toString(unique(CRPRecipname)),
commi_names = toString(unique(CRPFilerid)),
reci_names = toString(unique(City)),
Mean=mean(Amount),
num=length(Amount),
total=sum(Amount),
Median=median(Amount),
freq_words=toString(names(sort(table(removeWords(unlist(strsplit(dat$Descrip," ")),stopwords)),decreasing=T)[1:5]))
)
library(dplyr)
stopwords = c("a" ,"an", "the", ":","-","  ")
A<-Expends2002
by(State)
summarize(reci_names = toString(unique(CRPRecipname)),
commi_names = toString(unique(CRPFilerid)),
reci_names = toString(unique(City)),
Mean=mean(Amount),
num=length(Amount),
total=sum(Amount),
Median=median(Amount),
freq_words=toString(names(sort(table(removeWords(unlist(strsplit(dat$Descrip," ")),stopwords)),decreasing=T)[1:5]))
)
library(dplyr)
library(doParallel)
?doParallel
workers=makeCluster(4,type="SOCK")
library(doParallel)
workers=makeCluster(4,type="SOCK")
install.packages("doParallel")
workers=makeCluster(4,type="SOCK")
library(doParallel)
workers=makeCluster(4,type="SOCK")
registerDoParallel(workers)
foreach(i=1:4) %dopar% Sys.getpid()
foreach(i=1:4) %dopar% Sys.getpid()
} dump("addSquares", file="subtractSquares.R") } dump("addSquares", file="addSquares.R")
## Function 2: Difference of squares subtractSquares <- function(x, y){
return(list(square=(x^2 - y^2), x = x, y = y))
## Function 1: Sum of squares addSquares <- function(x, y){
return(list(square=(x^2 + y^2), x = x, y = y))
addSquares <- function(x, y){ return(list(square=(x^2 + y^2), x = x, y = y))
}
dump("addSquares", file="addSquares.R")
subtractSquares <- function(x, y){ return(list(square=(x^2 - y^2), x = x, y = y))
}
dump("subtractSquares", file="subtractSquares.R")
getwd()
setwd()
setwd("C:/Users/dl0ck/OneDrive/Documents/Spring 2018/Applied Statistical Programming/git")
addSquares <- function(x, y){ return(list(square=(x^2 + y^2), x = x, y = y))
}
dump("addSquares", file="addSquares.R")
subtractSquares <- function(x, y){ return(list(square=(x^2 - y^2), x = x, y = y))
}
dump("subtractSquares", file="subtractSquares.R")
source('C:/Users/dl0ck/OneDrive/Documents/Spring 2018/Applied Statistical Programming/git/Week 6/packages.R', echo=TRUE)
source("addSquares.R") ## Load functions into workspace source("subtractSquares.R")
package.skeleton(name = "squaresPack",
list = c("addSquares", "subtractSquares"))
setwd("C:/Users/dl0ck/OneDrive/Documents/Spring 2018/Applied Statistical Programming/git/Week 6/squarePackSkeleton")
setwd("C:/Users/dl0ck/OneDrive/Documents/Spring 2018/Applied Statistical Programming/git/Week 6/squarePackSkeleton")
## Set the working directory rm(list=ls()) ## Clear the workspace
source("addSquares.R") ## Load functions into workspace source("subtractSquares.R")
setwd("C:/Users/dl0ck/OneDrive/Documents/Spring 2018/Applied Statistical Programming/git/Week 6")
## Set the working directory rm(list=ls()) ## Clear the workspace
source("addSquares.R") ## Load functions into workspace source("subtractSquares.R")
setwd("C:/Users/dl0ck/OneDrive/Documents/Spring 2018/Applied Statistical Programming/git/Week 6/squarePack")
setwd("C:/Users/dl0ck/OneDrive/Documents/Spring 2018/Applied Statistical Programming/git/Week 6/squaresPack/R")
## Set the working directory rm(list=ls()) ## Clear the workspace
source("addSquares.R")
source("subtractSquares.R")
## Load functions into workspace source("subtractSquares.R")
package.skeleton(name = "squaresPackSkeleton",
list = c("addSquares", "subtractSquares"))
?package.skeleton
